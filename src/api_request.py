from abc import ABC, abstractmethod

class ApiRequest(ABC):
    """Абстрактный класс для работы с API сервиса с вакансиями"""

    @abstractmethod
    def api_connect(self, url):
        pass

    @abstractmethod
    def get_vacancies(self):
        pass


#Создать абстрактный класс для работы с API сервиса с вакансиями. Реализовать класс, наследующийся от абстрактного класса,
# для работы с платформой hh.ru. Класс должен уметь подключаться к API и получать вакансии.


# Взаимодействие с API/ Создан абстрактный класс для работы с API.
# Реализован метод подключения к API в абстрактном классе.
# Реализован метод получения вакансий отдельно в абстрактном классе.
# Используется декоратор
# @abstract_method
#  для методов абстрактного класса.
# Абстрактные методы не имеют реализации.
# Создан класс для работы с hh.ru.
# Класс для работы с hh.ru наследуется от абстрактного.
# Реализованы все методы абстрактного класса.
# Атрибуты экземпляра класса — приватные.
# Метод подключения к API hh.ru — приватный.
# В методе подключения к API отправляется запрос на базовый URL.
# В методе подключения к API происходит проверка статус-кода ответа.
# Метод подключения к API hh.ru вызывается в методе получения данных перед отправкой запроса.
# Метод получения данных принимает параметр — ключевое слово для поиска вакансий.
# Метод получения данных формирует параметры для запроса как минимум из
# text, per_page.
# Метод получения данных отправляет запрос на API hh.ru для получения данных о вакансиях по ключевому слову.
# Метод получения данных собирает данные ответа в формате списка словарей из ключа item.